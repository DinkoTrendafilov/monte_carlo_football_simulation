import numpy as np
from math import factorial, comb
from collections import defaultdict
import matplotlib.pyplot as plt

# –í—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏ - —Ç–≤–æ—è—Ç –º—É–ª—Ç–∏–Ω–æ–º–∏–∞–ª–µ–Ω –º–æ–¥–µ–ª
print("=== –ú–£–õ–¢–ò–ù–û–ú–ò–ê–õ–ï–ù MONTE CARLO –ó–ê –§–£–¢–ë–û–õ–ï–ù –°–ï–ó–û–ù ===")
n_matches = int(input("–ë—Ä–æ–π –º–∞—á–æ–≤–µ –≤ —Å–µ–∑–æ–Ω–∞ (38 –∑–∞ –í–∏—Å—à–∞ –ª–∏–≥–∞): "))
win_p = float(input("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ –ø–æ–±–µ–¥–∞ (%): ")) / 100
draw_p = float(input("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ —Ä–∞–≤–µ–Ω (%): ")) / 100
loss_p = float(input("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ –∑–∞–≥—É–±–∞ (%): ")) / 100
num_seasons = int(input("–ë—Ä–æ–π —Å–∏–º—É–ª–∏—Ä–∞–Ω–∏ —Å–µ–∑–æ–Ω–∏: "))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—É–º–∞—Ç–∞ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏—Ç–µ
if abs(win_p + draw_p + loss_p - 1.0) > 0.01:
    print("-" * 80)
    print("–ì–†–ï–®–ö–ê: –°—É–º–∞—Ç–∞ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ 100%!")
    print(f"–¢–µ–∫—É—â–∞ —Å—É–º–∞: {(win_p + draw_p + loss_p) * 100:.1f}%")
    print("-" * 80)
    exit()

print("-" * 80)
print(f"üìä –ú–£–õ–¢–ò–ù–û–ú–ò–ê–õ–ï–ù –ú–û–î–ï–õ:")
print(f"–ü–æ–±–µ–¥–∞: {win_p:.1%} | –†–∞–≤–µ–Ω: {draw_p:.1%} | –ó–∞–≥—É–±–∞: {loss_p:.1%}")
print(f"–û—á–∞–∫–≤–∞–Ω–∏ —Ç–æ—á–∫–∏ –Ω–∞ –º–∞—á: {win_p * 3 + draw_p * 1:.2f}")

# –ú—É–ª—Ç–∏–Ω–æ–º–∏–∞–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ (—Ç–≤–æ—è—Ç –∫–æ–¥)
print("-" * 80)
print("üî¢ –ú–£–õ–¢–ò–ù–û–ú–ò–ê–õ–ï–ù –ê–ù–ê–õ–ò–ó (–Ω–∞–π-–≤–µ—Ä–æ—è—Ç–Ω–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏):")

k = 3
d = defaultdict(float)
TOTAL_EVENTS_FACTORIAL = factorial(n_matches)

top_combinations = []
for wins in range(n_matches + 1):
    for draws in range(n_matches + 1):
        losses = n_matches - wins - draws
        if losses >= 0:
            coefficient = TOTAL_EVENTS_FACTORIAL // (factorial(wins) * factorial(draws) * factorial(losses))
            probability = (win_p ** wins) * (draw_p ** draws) * (loss_p ** losses) * coefficient
            points = wins * 3 + draws * 1
            top_combinations.append((wins, draws, losses, points, probability))

# –°–æ—Ä—Ç–∏—Ä–∞–Ω–µ –∏ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–æ–ø 10
top_combinations.sort(key=lambda x: -x[4])
print("–¢–æ–ø 10 –Ω–∞–π-–≤–µ—Ä–æ—è—Ç–Ω–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:")
for i, (w, d, l, pts, prob) in enumerate(top_combinations[:10], 1):
    print(f"{i:2d}. {w} –ø–æ–±/{d} —Ä–∞–≤/{l} –∑–∞–≥ -> {pts} —Ç–æ—á–∫–∏ ({prob:.4%})")

# Monte Carlo —Å–∏–º—É–ª–∞—Ü–∏—è
print("-" * 80)
print("üé≤ MONTE CARLO –°–ò–ú–£–õ–ê–¶–ò–Ø:")
print(f"–°–∏–º—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ {num_seasons} —Å–µ–∑–æ–Ω–∞...")

points_per_season = []
wins_per_season = []

for season in range(num_seasons):
    total_points = 0
    total_wins = 0

    # –°–∏–º—É–ª–∏—Ä–∞–º–µ –≤—Å–µ–∫–∏ –º–∞—á –≤ —Å–µ–∑–æ–Ω–∞
    for match in range(n_matches):
        result = np.random.choice(['–ø–æ–±–µ–¥–∞', '—Ä–∞–≤–µ–Ω', '–∑–∞–≥—É–±–∞'], p=[win_p, draw_p, loss_p])

        if result == '–ø–æ–±–µ–¥–∞':
            total_points += 3
            total_wins += 1
        elif result == '—Ä–∞–≤–µ–Ω':
            total_points += 1

    points_per_season.append(total_points)
    wins_per_season.append(total_wins)

# –ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
points_array = np.array(points_per_season)
wins_array = np.array(wins_per_season)

print("-" * 80)
print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–ï–ù –ê–ù–ê–õ–ò–ó:")
print(f"{'–ú–ï–¢–û–î':<25} {'–ú–û–ù–¢–ï –ö–ê–†–õ–û':<15} {'–ú–£–õ–¢–ò–ù–û–ú–ò–ê–õ–ï–ù':<15}")
print(f"{'-' * 55}")

# –°—Ä–µ–¥–Ω–∏ —Ç–æ—á–∫–∏
mc_avg_points = np.mean(points_array)
multinom_avg_points = n_matches * (win_p * 3 + draw_p * 1)
print(f"{'–°—Ä–µ–¥–Ω–∏ —Ç–æ—á–∫–∏':<25} {mc_avg_points:<15.1f} {multinom_avg_points:<15.1f}")

# –°—Ä–µ–¥–Ω–∏ –ø–æ–±–µ–¥–∏
mc_avg_wins = np.mean(wins_array)
multinom_avg_wins = n_matches * win_p
print(f"{'–°—Ä–µ–¥–Ω–∏ –ø–æ–±–µ–¥–∏':<25} {mc_avg_wins:<15.1f} {multinom_avg_wins:<15.1f}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ
champions = sum(1 for p in points_per_season if p >= 75)
europe = sum(1 for p in points_per_season if p >= 60)
relegation = sum(1 for p in points_per_season if p <= 30)

print("-" * 80)
print("üèÜ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê –ö–õ–ê–°–ò–†–ê–ù–ï (Monte Carlo):")
print(f"–®–∞–º–ø–∏–æ–Ω—Å–∫–∏ —Ç–∏—Ç–ª–∏: {champions} ({(champions / num_seasons) * 100:.1f}%)")
print(f"–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ –ï–≤—Ä–æ–ø–∞: {europe} ({(europe / num_seasons) * 100:.1f}%)")
print(f"–ò–∑–ø–∞–¥–∞–Ω–∏—è: {relegation} ({(relegation / num_seasons) * 100:.1f}%)")

print("-" * 80)
print("üìà –†–ê–ó–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê –¢–û–ß–ö–ò–¢–ï (Monte Carlo):")
for points_range in range(0, n_matches * 3 + 1, 10):
    count = len([p for p in points_per_season if points_range <= p < points_range + 10])
    percentage = (count / num_seasons) * 100
    if count > 0:
        bar = '‚ñà' * max(1, int(percentage / 2))
        print(f"{points_range:2d}-{points_range + 9:2d} —Ç–æ—á–∫–∏: {count:4d} —Å–µ–∑–æ–Ω–∞ ({percentage:5.1f}%) {bar}")

print("-" * 80)

# –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞–π-–≤–µ—Ä–æ—è—Ç–Ω–∏—è —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç Monte Carlo
points_counts = {}
for points in points_per_season:
    points_counts[points] = points_counts.get(points, 0) + 1

most_common_points = max(points_counts.items(), key=lambda x: x[1])
print(f"üéØ –ù–ê–ô-–ß–ï–°–¢ –°–ï–ó–û–ù –û–¢ –ú–û–ù–¢–ï –ö–ê–†–õ–û: {most_common_points[0]} —Ç–æ—á–∫–∏ ({most_common_points[1]} –ø—ä—Ç–∏)")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º—É–ª—Ç–∏–Ω–æ–º–∏–∞–ª–Ω–∏—è –º–æ–¥–µ–ª
multinom_most_likely = top_combinations[0]
print(f"üéØ –ù–ê–ô-–í–ï–†–û–Ø–¢–ï–ù –°–ï–ó–û–ù –û–¢ –ú–£–õ–¢–ò–ù–û–ú–ò–ê–õ: {multinom_most_likely[3]} —Ç–æ—á–∫–∏ ({multinom_most_likely[4]:.4%})")

print("-" * 80)
print("üí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
print("–ú—É–ª—Ç–∏–Ω–æ–º–∏–∞–ª–Ω–∏—è—Ç –º–æ–¥–µ–ª –¥–∞–≤–∞ –¢–û–ß–ù–ò –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
print("Monte Carlo –¥–∞–≤–∞ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ —Å—ä—Å —Å–∏–º—É–ª–∞—Ü–∏–∏")
print("–î–≤–∞—Ç–∞ –º–µ—Ç–æ–¥–∞ —Å–µ –¥–æ–ø—ä–ª–≤–∞—Ç –ø–µ—Ä—Ñ–µ–∫—Ç–Ω–æ! üéØ")

print("-" * 80)